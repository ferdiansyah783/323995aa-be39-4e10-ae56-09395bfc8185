// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  name           String    @db.VarChar
  email          String    @unique @db.VarChar
  password       String    @db.VarChar
  salt           String    @db.VarChar
  role           Role      @relation(fields: [roleId], references: [id])
  roleId         String    @db.Uuid
  adminProject   Project[] @relation("AdminProject")
  projectMembers Project[] @relation("ProjectMembers")
  taskManagers   Task[]    @relation("TaskManager")
  taskEmployees  Task[]    @relation("TaskEmployee")
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt()
  deleted        Boolean   @default(false)
}

model Role {
  id         String       @id @default(uuid()) @db.Uuid
  name       String       @unique @db.VarChar(50)
  users      User[]
  Permission Permission[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt()
  deleted    Boolean      @default(false)
}

model Permission {
  id         String  @id @default(uuid()) @db.Uuid
  role       Role    @relation(fields: [roleId], references: [id])
  roleId     String  @db.Uuid
  action     String  @db.VarChar(50)
  subject    String  @db.VarChar(50)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text
}

model Project {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(100)
  admin     User     @relation("AdminProject", fields: [adminId], references: [id])
  adminId   String   @db.Uuid
  members   User[]   @relation("ProjectMembers")
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  deleted   Boolean  @default(false)
}

model Task {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @db.VarChar(100)
  description String      @db.VarChar(250)
  manager     User        @relation("TaskManager", fields: [managerId], references: [id])
  managerId   String      @db.Uuid
  project     Project     @relation(fields: [projectId], references: [id])
  projectId   String      @db.Uuid
  employee    User?       @relation("TaskEmployee", fields: [employeeId], references: [id])
  employeeId  String?     @db.Uuid
  deadline    DateTime    @db.Timestamp()
  status      TaskStatus?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt()
  deleted     Boolean     @default(false)
}

enum TaskStatus {
  ONGOING
  DONE_DEV
  DONE_QA
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  refreshToken String   @db.Uuid
  status       String   @db.VarChar(50)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  deleted      Boolean  @default(false)
}

model InvalidToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  deleted   Boolean  @default(false)
}
